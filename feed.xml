<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-12-07T01:56:32+01:00</updated><id>/feed.xml</id><title type="html">jorgecf</title><entry><title type="html">A straightforward introduction to Dependency Injection</title><link href="/2020/12/07/dependency-injection" rel="alternate" type="text/html" title="A straightforward introduction to Dependency Injection" /><published>2020-12-07T00:00:00+01:00</published><updated>2020-12-07T00:00:00+01:00</updated><id>/2020/12/07/dependency-injection</id><content type="html" xml:base="/2020/12/07/dependency-injection">&lt;p&gt;This post presents a concise and short introduction to the technique called Dependency Injection (DI).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-task&quot;&gt;The task&lt;/h2&gt;
&lt;p&gt;Let’s say you have a database with user-related data and that you want to query some of this data to process it. You might start with a class looking like this, using a &lt;code class=&quot;highlighter-rouge&quot;&gt;SqlReader&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;SqlReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SqlReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;QueryById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// process the data&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;        
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;p&gt;Imagine that your software expands and, when running in a new  mode, it should not get the data from a database but from some CSV files.&lt;/p&gt;

&lt;p&gt;The main obstacle here is that our &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; class is coupled with the &lt;code class=&quot;highlighter-rouge&quot;&gt;SqlReader&lt;/code&gt;: you can see it in the fact that a &lt;strong&gt;new&lt;/strong&gt; instance is created in the constructor. In short words, it depends on an implementation: &lt;code class=&quot;highlighter-rouge&quot;&gt;SqlReader&lt;/code&gt; is a &lt;strong&gt;dependency&lt;/strong&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One could add this CSV functionality to the &lt;code class=&quot;highlighter-rouge&quot;&gt;SqlReader&lt;/code&gt; class (ugly) or make &lt;code class=&quot;highlighter-rouge&quot;&gt;CsvReader&lt;/code&gt; expand &lt;code class=&quot;highlighter-rouge&quot;&gt;SqlReader&lt;/code&gt; (would get messy when adding even new more readers). This is a perfect use case for &lt;strong&gt;inversion of control&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-inversion-of-control&quot;&gt;The inversion of control&lt;/h2&gt;

&lt;h3 id=&quot;theory&quot;&gt;Theory&lt;/h3&gt;
&lt;p&gt;Here is where the concept &lt;strong&gt;Dependency Inversion&lt;/strong&gt; gets to shine. Simply speaking, it means that the control of any class dependencies should be inverted: the &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; class shouldn’t be the one instantiating a &lt;code class=&quot;highlighter-rouge&quot;&gt;SqlReader&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This can be accomplished with the technique called &lt;strong&gt;Dependency Injection&lt;/strong&gt;: it applies the principle that ensures classes are never responsible of supplying their own dependencies (they get &lt;em&gt;injected&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;And why is it important? It helps you decouple your application: you have the implemented code in one side, and the code that uses it in the other, both depending on a &lt;strong&gt;common interface&lt;/strong&gt;. You can change them separately as long as it fits the interface, thanks to the concerns being separated.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/di.png&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;the-code&quot;&gt;The code&lt;/h3&gt;
&lt;p&gt;Usually, you would start by creating an interface &lt;code class=&quot;highlighter-rouge&quot;&gt;IReader&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;QueryById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and implement it for every reader you wanted:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SqlReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;QueryById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CsvReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;QueryById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;interfaces-nothing-new&quot;&gt;Interfaces? Nothing new&lt;/h3&gt;

&lt;p&gt;You probably already knew about interfaces and, at the end of the day, an object based on one has to be instantiated with a concrete implementation. So how is it better if you’re going to end up doing this?:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;IReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SqlReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;--- coupling&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;QueryById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// process the data&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;       
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
This is where the &lt;strong&gt;dependency inversion container&lt;/strong&gt; plays its part: somewhere in your code, you still need to instantiate the implementation of the interface. The container is the one actually instantiating your objects and supplying them, so your code will look like this:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;IReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;--- this is called by the container&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;--- injection&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;QueryById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// process the data&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;       
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
The container is a fairly complicated software that tracks and manages how interfaces are implemented. You could simplify them in your mind as a dictionary of interfaces mapped to implementing classes. Some examples of these containers are Autofac or Ninject.&lt;/p&gt;

&lt;p&gt;With Autofac you can do something in the lines of this to have multiple implementations depending on some runtime variable:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someCondition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;As&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CsvReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsIReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
The magic thing about containers, as opposed to wiring the dependencies yourself, is that you don’t have to worry about calling the constructor with &lt;code class=&quot;highlighter-rouge&quot;&gt;new SqlReader()&lt;/code&gt;. This is very useful with a lot of interfaces where the dependency chain is deeply nested. &lt;strong&gt;You just tell the container what implementation you want to use&lt;/strong&gt; and let it inject it using the constructor in whatever number of classes you might have.&lt;/p&gt;

&lt;p&gt;After these changes, total decoupling is achieved. &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; doesn’t have to know any details of &lt;code class=&quot;highlighter-rouge&quot;&gt;IReader&lt;/code&gt; or even how its instantiated: &lt;strong&gt;it just gets injected&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note that containers usually can inject dependencies via the constructor, or a property or field.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;so-what-is-it-useful-for&quot;&gt;So what is it useful for?&lt;/h3&gt;

&lt;h4 id=&quot;extensibility-and-reusability&quot;&gt;Extensibility and reusability&lt;/h4&gt;

&lt;p&gt;The first thing to note is that given your code is based on abstracts, extending it’s as easy as implementing new classes and telling the container under which circumstances they should be used. The same code using &lt;code class=&quot;highlighter-rouge&quot;&gt;IReader&lt;/code&gt; can work with a &lt;code class=&quot;highlighter-rouge&quot;&gt;SqlReader&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CsvReader&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JsonReader&lt;/code&gt; or any other implementation. You can change and switch these classes without having to change the code that uses them.&lt;/p&gt;

&lt;h4 id=&quot;unit-testing&quot;&gt;Unit testing&lt;/h4&gt;

&lt;p&gt;If you wanted to test the &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo.Process&lt;/code&gt; method, hitting your database when running tests would be, most of the time, an anti-pattern and slow.&lt;/p&gt;

&lt;p&gt;But, since Foo depends on the interface &lt;code class=&quot;highlighter-rouge&quot;&gt;IReader&lt;/code&gt;, you can resolve this interface to &lt;code class=&quot;highlighter-rouge&quot;&gt;SqlReader&lt;/code&gt; in normal execution and &lt;code class=&quot;highlighter-rouge&quot;&gt;FakeDataReader&lt;/code&gt; while running tests. The &lt;code class=&quot;highlighter-rouge&quot;&gt;FakeDataReader&lt;/code&gt; would just fake the database using in-memory variables. That would mean faster tests and in a more controlled and reproducible environment.&lt;/p&gt;

&lt;h4 id=&quot;safer-parallel-programming&quot;&gt;Safer parallel programming&lt;/h4&gt;

&lt;p&gt;Two developers can work with classes that use each other only based on the interface, without having to modify the other developer files. Less git conflicts 😃.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-cons&quot;&gt;The cons&lt;/h3&gt;

&lt;p&gt;Obviously, the main adverse effect is the added layer of &lt;strong&gt;indirection&lt;/strong&gt;. This makes the software a bit harder to understand - your implemented classes won’t be directly referenced where they will be used. You won’t be able to find references or easily trace them, and you won’t know which implementation is injected until you debug it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h3&gt;
&lt;p&gt;To summarize, dependency injection is a technique used to satisfy the &lt;strong&gt;dependency inversion principle&lt;/strong&gt;, introducing interfaces between a high-level class and its dependencies and making their relation loosely coupled assuring that the only central point where an interface is related to its actual implementation is in the container code.&lt;/p&gt;

&lt;p&gt;The three steps to achieve this would be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get your high-level class dependencies injected via the constructor (&lt;em&gt;dependency injection&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;Make this dependencies implement a common interface (&lt;em&gt;decoupling&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;Leave the hassle of calling all the injecting constructors to a dependency inversion container.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a sidenote, using interfaces isn’t inherent to dependency injection: you can have dependencies marked as a normal class and have them injected, but DI works better with interfaces.&lt;/p&gt;

&lt;p&gt;At the end of the day, using this technique is a development decision up the creator. Any questions?&lt;/p&gt;</content><author><name>Jorge Cifuentes</name></author><category term="inversion" /><category term="patterns" /><summary type="html">This post presents a concise and short introduction to the technique called Dependency Injection (DI).</summary></entry><entry><title type="html">Logging into your Archlinux installation through a bootable USB</title><link href="/2020/07/03/chroot-arch-iso" rel="alternate" type="text/html" title="Logging into your Archlinux installation through a bootable USB" /><published>2020-07-03T20:00:00+02:00</published><updated>2020-07-03T20:00:00+02:00</updated><id>/2020/07/03/chroot-arch-iso</id><content type="html" xml:base="/2020/07/03/chroot-arch-iso">&lt;div class=&quot;excerpt&quot;&gt;
    Simply put, I messed up installing Archlinux and my system didn't have internet so I couldn't do anything. This is the way I solved it.
&lt;/div&gt;
&lt;!--endexcerpt--&gt;

&lt;div class=&quot;article-content&quot;&gt;
    &lt;div class=&quot;text-content&quot;&gt;
        &lt;p&gt;
            For once in a long time, I had some trouble setting up WiFi and Ethernet in my Archlinux installation. After finishing and rebooting to the actual system, I couldn't get up dhcp, and neither wifi-menu (netctl) nor network-manager were installed so I didn't have any means to connect to the web and install needed packages. What a vicious circle.
        &lt;/p&gt;

        &lt;p&gt;
           What I had to do was quite simple really: grab again the bootable USB that I used to install the system in the first place, boot it into the installer and then mount my partitions. These are the partitions I created in the installation process, in my case root and home:
           
            &lt;div class=&quot;code-caption&quot;&gt;&lt;span&gt;mount /dev/sda1 /mnt&lt;/span&gt;&lt;/div&gt;
           
            &lt;div class=&quot;code-caption&quot;&gt;&lt;span&gt;mount /dev/sda2 /mnt/home&lt;/span&gt;&lt;/div&gt;
           
           Then, chroot into it:
           
            &lt;div class=&quot;code-caption&quot;&gt;&lt;span&gt;arch-chroot /mnt&lt;/span&gt;&lt;/div&gt;
           
           Now, you're inside your system as root. In my case, I used iwctl to connect to my WiFi (I used to use wifi-menu, I swear it came in the iso, but it didn't this time). Run &quot;ip a&quot; and get the name of your wireless interface, and connect to your wifi:
           
            &lt;div class=&quot;code-caption&quot;&gt;&lt;span&gt;station wlp01 scan&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&quot;code-caption&quot;&gt;&lt;span&gt;station wlp01 get-networks&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&quot;code-caption&quot;&gt;&lt;span&gt;station wlp01 connect YOUR_WIFI_SSID&lt;/span&gt;&lt;/div&gt;
           
           And you'll be prompted to enter the password. After that I rebooted into my actual system, and I was already able to download packages, so I just downloaded networkmanager from pacman. And that's all, having an internet connection I could install everything I needed:
           
           &lt;pre&gt;
                  .o+`                 jorge@jorge
                 `ooo/                 OS: Arch Linux 
                `+oooo:                Kernel: x86_64 Linux 5.7.7-arch1-1
               `+oooooo:               Uptime: 55m
               -+oooooo+:              Packages: 663
             `/:-:++oooo+:             Shell: zsh 5.8
            `/++++/+++++++:            Resolution: 1920x1080
           `/++++++++++++++:           DE: KDE 5.71.0 / Plasma 5.19.2
          `/+++ooooooooooooo/`         WM: KWin
         ./ooosssso++osssssso+`        GTK Theme: Breeze [GTK2/3]
        .oossssso-````/ossssss+`       Icon Theme: breeze
       -osssssso.      :ssssssso.      Disk: 6.0G / 190G (4%)
      :osssssss/        osssso+++.     CPU: Intel Core i5-4210H @ 4x 3.5GHz [55.0°C]
     /ossssssss/        +ssssooo/-     RAM: 2247MiB / 3853MiB
   `/ossssso+/:-        -:/+osssso+-   
  `+sso+:-`                 `.-/+oso: 
 `++:.                           `-/+/
 .`                                 `/

 &lt;/pre&gt;
        &lt;/p&gt;

    &lt;/div&gt;

&lt;/div&gt;</content><author><name>Jorge Cifuentes</name></author><category term="archlinux" /><category term="linux" /><summary type="html">Simply put, I messed up installing Archlinux and my system didn't have internet so I couldn't do anything. This is the way I solved it.</summary></entry><entry><title type="html">Integrating Google authentication with your Angular app</title><link href="/2020/04/18/google-oauth-angular" rel="alternate" type="text/html" title="Integrating Google authentication with your Angular app" /><published>2020-04-18T18:00:00+02:00</published><updated>2020-04-18T18:00:00+02:00</updated><id>/2020/04/18/google-oauth-angular</id><content type="html" xml:base="/2020/04/18/google-oauth-angular">&lt;div class=&quot;excerpt&quot;&gt;
    From the user point of view, the option to log in to a website with a Google account is convenient and
    standardized. The Google OAuth API is the way to implement it and, while the library is developed in plain
    JavaScript,
    it can easily be integrated into your Angular application.
&lt;/div&gt;
&lt;!--endexcerpt--&gt;

&lt;div class=&quot;article-content&quot;&gt;
    &lt;div class=&quot;text-content&quot;&gt;
        &lt;p&gt;
            When you want to add some kind of authentication system to your Angular-powered web app, Google OAuth comes
            in
            handy because it simplifies all the identity verification process for the developer and makes it a
            one-click well recognized action for your user.
        &lt;/p&gt;

        &lt;p&gt;
            The OAuth flow is a simple yet powerful one: the user clicks on a &quot;Sign in with Google&quot; button present at
            your page and is prompted with a form to log into his Google account. When the log-in is done, the form
            window
            closes and gives you back the user data and a signed token. And that's all! You can use it to identify your
            users.
        &lt;/p&gt;

        &lt;!-- Grab your keys --&gt;
        &lt;section&gt;
            &lt;div class=&quot;inter-title&quot;&gt;Grab your keys &lt;a id=&quot;grab-your-keys&quot; class=&quot;anchor&quot;&gt;#&lt;/a&gt;&lt;/div&gt;
            &lt;p&gt;
                First things first, you have to create a project through the Google API
                Console to which all log-ins will be associated. Refer to Google &lt;a
                    href=&quot;https://developers.google.com/identity/sign-in/web/sign-in&quot; target=&quot;_blank&quot;
                    rel=&quot;noreferrer noopener&quot;&gt;for
                    the creation steps.&lt;/a&gt;

                Once created, under the Credentials options, you need to set up an &quot;OAuth 2.0 Client&quot;. This will create
                a
                Client ID (our key) for you.

                &lt;img src=&quot;/assets/images/oauth_4.png&quot; alt=&quot;client id key&quot; /&gt;
            &lt;/p&gt;

            &lt;p&gt;
                An explicit authorization has to be added for every URL under which the app is going to be stored. For
                testing
                purposes,
                whitelisting your
                local development site should be sufficient.

                &lt;img src=&quot;/assets/images/oauth_5.png&quot; alt=&quot;whitelisted origins&quot; /&gt;

                With this credentials, now your app is allowed to communicate to Google.
            &lt;/p&gt;
        &lt;/section&gt;

        &lt;!-- Get your app ready --&gt;
        &lt;section&gt;
            &lt;div class=&quot;inter-title&quot;&gt;Get your app ready &lt;a id=&quot;get-your-app-ready&quot; class=&quot;anchor&quot;&gt;#&lt;/a&gt;&lt;/div&gt;
            &lt;p&gt;
                The SDK is developed in plain JavaScript, so in order to make our compiler happy, we have to install
                the Typescript types provided by the &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped&quot;
                    target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;DefinitelyTyped project&lt;/a&gt;. Open up a
                terminal and
                install
                them via npm:
                &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/gapi.auth2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
            &lt;/p&gt;

            &lt;p&gt;
                By default, you should have the types loaded, since your TS compiler usually looks for them
                under
                the &lt;span class=&quot;monotype&quot;&gt;node_modules/@types&lt;/span&gt; folder, where this
                particular package is installed. If it's not the case, you can assert
                it filling the types array:

                &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;compilerOptions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gapi.auth2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
                &lt;div class=&quot;code-caption&quot;&gt;&lt;span&gt;tsconfig.json&lt;/span&gt;&lt;/div&gt;
            &lt;/p&gt;

            &lt;p&gt;
                And a script tag should be placed at your index. This will load the external code.
                &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://apis.google.com/js/api.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
                &lt;div class=&quot;code-caption&quot;&gt;&lt;span&gt;index.html&lt;/span&gt;&lt;/div&gt;
            &lt;/p&gt;
        &lt;/section&gt;

        &lt;!-- Place a button --&gt;
        &lt;section&gt;
            &lt;div class=&quot;inter-title&quot;&gt;Place a button &lt;a id=&quot;place-a-button&quot; class=&quot;anchor&quot;&gt;#&lt;/a&gt;&lt;/div&gt;
            &lt;p&gt;
                I'm going to use a simple button for the user to log-in. When this button is clicked, a prompt will ask
                the
                user to grant permission to your application. Whether they complete the form or abandon it, we'll catch
                the
                result.

                &lt;img src=&quot;/assets/images/oauth_2.png&quot; alt=&quot;oauth form&quot; /&gt;
            &lt;/p&gt;

            &lt;p&gt;
                Create a component:
                &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;ng&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
            &lt;/p&gt;

            &lt;p&gt;
                And give it a click handler:

                &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;(click)=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authenticate()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Authenticate&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
                &lt;div class=&quot;code-caption&quot;&gt;&lt;span&gt;auth-button.component.html&lt;/span&gt;&lt;/div&gt;

            &lt;/p&gt;

            &lt;p&gt;
                Now, you're ready to add the logic behind it.
            &lt;/p&gt;
        &lt;/section&gt;

        &lt;!-- Make some promises --&gt;
        &lt;section&gt;
            &lt;div class=&quot;inter-title&quot;&gt;Make some promises &lt;a id=&quot;make-some-promises&quot; class=&quot;anchor&quot;&gt;#&lt;/a&gt;&lt;/div&gt;
            &lt;p&gt;
                Talking to a server is an inherently asynchronous operation.
            &lt;/p&gt;

            &lt;p&gt;
                The gapi relies heavily in callbacks in a way I don't feel really comfortable with, so
                my
                personal approach here is wrapping the functions in Promises so they can be called in a more functional
                way.
            &lt;/p&gt;

            &lt;p&gt;
                For the set up, you will have to load the auth2 library and initialize it with your app key. I wrote
                this
                function to be called in a &quot;lazy&quot; way, that means, it's not to be called until authentication happens
                for
                the first time.

                &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;  &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initGoogleAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  Create a new Promise where the resolve &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// function is the callback passed to gapi.load&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;gapi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;auth2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// When the first promise resolves, it means we have gapi&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// loaded and that we can call gapi.init&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gapi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth2&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;YOUR_GOOGLE_KEY&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gapiSetup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
                &lt;div class=&quot;code-caption&quot;&gt;&lt;span&gt;auth-button.component.ts&lt;/span&gt;&lt;/div&gt;
            &lt;/p&gt;

            &lt;p&gt;
                The second one is the actual authentication method we previously set as the click handler. We
                await for the prompt result and catch the result with the data or the error.

                &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;  &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gapi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GoogleUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Initialize gapi if not done yet&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gapiSetup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initGoogleAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Resolve or reject signin Promise&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;signIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
                &lt;div class=&quot;code-caption&quot;&gt;&lt;span&gt;auth-button.component.ts&lt;/span&gt;&lt;/div&gt;
            &lt;/p&gt;

            &lt;p&gt;
                This would work already, but if you want to keep your user logged in when they come back, you can check
                if
                there's one currently stored on your ngOnInit and use it:

                &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;  &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkIfUserAuthenticated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Initialize gapi if not done yet&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gapiSetup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initGoogleAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isSignedIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
                &lt;div class=&quot;code-caption&quot;&gt;&lt;span&gt;auth-button.component.ts&lt;/span&gt;&lt;/div&gt;

                &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;  &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ngOnInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checkIfUserAuthenticated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
                &lt;div class=&quot;code-caption&quot;&gt;&lt;span&gt;auth-button.component.ts&lt;/span&gt;&lt;/div&gt;
            &lt;/p&gt;

            &lt;p&gt;
                After that, the local variable user is filled with the user data, including a unique ID, and can be sent
                to your server
                to be stored.
            &lt;/p&gt;
        &lt;/section&gt;

        &lt;!-- Talk to the server --&gt;
        &lt;section&gt;
            &lt;div class=&quot;inter-title&quot;&gt;Talk to the server &lt;a id=&quot;talk-to-the-server&quot; class=&quot;anchor&quot;&gt;#&lt;/a&gt;&lt;/div&gt;
            &lt;p&gt;
                Now that you have a way to identify each one of your users uniquely and unequivocally, the
                logical
                step forward is to send this info to your backend. Usually, you'd want to store the unique ID in your
                database system of choice.

            &lt;/p&gt;
            &lt;p&gt;
                It's not a secret that sending this ID plainly to your backend would raise a huge security issue: you
                have to consider &lt;strong&gt;everything&lt;/strong&gt; that comes from your client &lt;em&gt;insecure by default&lt;/em&gt;.
            &lt;/p&gt;

            &lt;p&gt;
                When the user logs in to your site through Google OAuth, the api gives you not only the personal data
                for
                the user but a token as well. Simply speaking, this token is generated and signed at Google's side and
                it
                states for
                whom user is valid and to which app, until when is valid amongst some other data. This token is what
                you
                will
                send
                to your server, and its validation is the way to make sure your application does not get compromised.
                Google
                provides &lt;a
                    href=&quot;https://developers.google.com/identity/sign-in/web/backend-auth#verify-the-integrity-of-the-id-token&quot;
                    target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the steps needed to validate one of its tokens.&lt;/a&gt;
            &lt;/p&gt;

            &lt;p&gt;
                Furthermore, they have already built-in libraries to do the dirty work in some languages. For example,
                for
                .NET a
                &lt;span class=&quot;monotype&quot;&gt;GoogleJsonWebSignature.ValidateAsync&lt;/span&gt; method is provided. If you &lt;a
                    href=&quot;https://github.com/googleapis/google-api-dotnet-client/blob/master/Src/Support/Google.Apis.Auth/GoogleJsonWebSignature.cs&quot;
                    target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;inspect the code&lt;/a&gt;, you will see how every step is
                implemented.

            &lt;/p&gt;
        &lt;/section&gt;

        &lt;section&gt;
            &lt;div class=&quot;inter-title&quot;&gt;Final thoughts &lt;a id=&quot;final-thoughts&quot; class=&quot;anchor&quot;&gt;#&lt;/a&gt;&lt;/div&gt;
            &lt;p&gt;
                I hope you found this little covering interesting.
                You can check the working example &lt;a href=&quot;https://github.com/jorgecf/google-oauth-angular&quot; target=&quot;_blank&quot;
                    rel=&quot;noreferrer noopener&quot;&gt;in my
                    GitHub.&lt;/a&gt;
            &lt;/p&gt;
        &lt;/section&gt;

    &lt;/div&gt;

&lt;/div&gt;</content><author><name>Jorge Cifuentes</name></author><category term="angular" /><category term="oauth" /><summary type="html">From the user point of view, the option to log in to a website with a Google account is convenient and standardized. The Google OAuth API is the way to implement it and, while the library is developed in plain JavaScript, it can easily be integrated into your Angular application.</summary></entry></feed>